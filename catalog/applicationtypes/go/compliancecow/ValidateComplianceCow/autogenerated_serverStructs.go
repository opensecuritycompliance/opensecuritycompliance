// This file is autogenerated. Please do not modify
package main
import (
	"time"
	
)



const (
	appObject    = "app"
	serverObject = "server"
)

const (
	_ = iota
	schemaInputs
	schemaFacts
	schemaOutputs
)

type TaskInputs struct {
	SystemInputs `yaml:",inline"`
	UserInputs   *UserInputs `yaml:"userInputs"`
	FromDate_     time.Time `yaml:"fromDate,omitempty"`
    ToDate_       time.Time `yaml:"toDate,omitempty"`
}

type TaskInputsV2 struct {
	SystemInputs `yaml:",inline"`
	UserInputs   *UserInputs `yaml:"userInputs"`
	FromDate_     string `yaml:"fromDate,omitempty"`
    ToDate_       string `yaml:"toDate,omitempty"`
}

type SystemInputs struct {
	UserObject    *ObjectTemplate `yaml:"userObject"`
	SystemObjects []*ObjectTemplate `yaml:"systemObjects"`
	MetaData      *MetaDataTemplate`yaml:"-"`
}

type ObjectTemplate struct {
	App         *AppAbstract  `yaml:"app,omitempty"`
	Server      *ServerAbstract `yaml:"server,omitempty"`
	Credentials []*Credential   `yaml:"credentials,omitempty"`
}

type MetaDataTemplate struct {
	RuleGUID          string
	RuleTaskGUID      string
	ControlID         string
	PlanExecutionGUID string
}

type TaskOutputs struct {
	Outputs *Outputs
}

type AppAbstract struct {
	*AppBase  `yaml:",inline"`
	ID          string               `json:"id,omitempty"`
	AppSequence int                 `json:"appSequence,omitempty"`
	AppTags     map[string][]string `json:"appTags,omitempty"`
	ActionType  string              `json:"actionType,omitempty"`
	AppObjects  map[string]interface{}
	Servers     []*ServerAbstract `json:"servers,omitempty"`
	UserDefinedCredentials interface{} `json:"userDefinedCredentials" yaml:"userDefinedCredentials"`
}

type AppBase struct {
	ApplicationName string                 `json:"appName,omitempty" yaml:"name" validate:"required"`
	ApplicationGUID string                 `json:"applicationguid,omitempty" yaml:"applicationguid,omitempty"`
	AppGroupGUID    string                 `json:"appgroupguid,omitempty" yaml:"appgroupguid,omitempty"`
	ApplicationURL  string                 `json:"AppURL,omitempty" yaml:"appURL,omitempty"`
	ApplicationPort string                 `json:"Port,omitempty" yaml:"appPort,omitempty"`
	OtherInfo       map[string]interface{} `yaml:"otherinfo,omitempty"`
}

type ServerBase struct {
	ServerGUID      string
	ServerName      string `json:"servername,omitempty"`
	ApplicationGUID string `json:"appid,omitempty"`
	ServerType      string `json:"servertype,omitempty"`
	ServerURL       string `json:"serverurl,omitempty"`
	ServerHostName  string `json:"serverhostname,omitempty"`
}

type ServerAbstract struct {
	ServerBase  `yaml:",inline"`
	ID            string              `json:"id,omitempty"`
	ServerTags    map[string][]string `json:"servertags,omitempty"`
	ServerBootSeq int                 `json:"serverbootseq,omitempty"`
	ActionType    string              `json:"actiontype,omitempty"`
	OSInfo        struct {
		OSDistribution string `json:"osdistribution,omitempty"`
		OSKernelLevel  string `json:"oskernellevel,omitempty"`
		OSPatchLevel   string `json:"ospatchlevel,omitempty"`
	} `json:"osinfo,omitempty"`
	IPv4Addresses map[string]string `json:"ipv4addresses,omitempty"`
	Volumes       map[string]string `json:"volumes,omitempty"`
	OtherInfo     struct {
		CPU      int `json:"cpu,omitempty"`
		GBMemory int `json:"memory_gb,omitempty"`
	} `json:"otherinfo,omitempty"`
	ClusterInfo struct {
		ClusterName    string            `json:"clustername,omitempty"`
		ClusterMembers []*ServerAbstract `json:"clustermembers,omitempty"`
	} `json:"clusterinfo,omitempty"`
	Servers []*ServerAbstract `json:"servers,omitempty"`
}

// Credential : Holds Customer Credentials
type Credential struct {
	CredentialBase  `yaml:",inline"`
	ID            string                 `json:"id,omitempty" yaml:"id,omitempty"`
	PasswordHash  []byte                 `json:"passwordhash,omitempty" yaml:"passwordhash,omitempty"`
	Password      string                 `json:"passwordstring,omitempty" yaml:"password,omitempty"`
	LoginURL      string                 `json:"loginurl,omitempty" yaml:"loginURL,omitempty" validate:"required,url"`
	SSHPrivateKey []byte                 `json:"sshprivatekey,omitempty" yaml:"sshprivatekey,omitempty"`
	CredTags      map[string][]string    `json:"credtags,omitempty" yaml:"tags,omitempty"`
	OtherCredInfo map[string]interface{} `json:"othercredinfomap,omitempty" yaml:"otherCredentials" validate:"required"`
}


type CredentialBase struct {
    CredGUID   string `json:"credguid,omitempty" yaml:"credguid,omitempty"`
    CredType   string `json:"credtype,omitempty" yaml:"credType,omitempty"`
    SourceGUID string `json:"sourceguid,omitempty" yaml:"sourceguid,omitempty"`
    SourceType string `json:"sourcetype,omitempty" yaml:"sourcetype,omitempty"`
    UserID     string `json:"userID,omitempty" yaml:"userid,omitempty"`
}



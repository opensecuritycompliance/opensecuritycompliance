apiVersion: v1alpha1
kind: rule
meta:
  name: GCPCloudStorageLoggingEnabled
  purpose: Ensures access logging is enabled for Cloud Storage buckets to track data
    interactions, enhance security monitoring, and support compliance.
  description: Ensures access logging is enabled for Cloud Storage buckets to track
    data interactions, enhance security monitoring, and support compliance.
  labels:
    appType:
    - httprequest
    environment:
    - logical
    execlevel:
    - app
spec:
  inputs:
    BucketsRequestConfigFile: <<MINIO_FILE_PATH>>               # Request Config file to get the list of buckets from GCP Cloud Storage  
    CheckIfLoggingExistConditionConfig: <<MINIO_FILE_PATH>>     # Condition config file to check if Logging Exists or not  
    ExtractBucketsJQExpression: .[].items[]             
    MergeType: APPEND         
    OutputFileFormat: JSON      
    TransformLoggingExistConfigFile: <<MINIO_FILE_PATH>>        # Transform config file to standardize Logging existing file    
    TransformLoggingNotExistConfigFile: <<MINIO_FILE_PATH>>     # Transform config file to standardize Logging not exist file    
  inputsMeta__:
  - name: BucketsRequestConfigFile
    dataType: HTTP_CONFIG
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: ExtractBucketsJQExpression
    dataType: STRING
    repeated: false
    defaultValue: .[].items[]
    allowedValues: []
    showField: true
    required: true
  - name: CheckIfLoggingExistConditionConfig
    dataType: FILE
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: OutputFileFormat
    dataType: STRING
    repeated: false
    defaultValue: JSON
    allowedValues:
    - YAML
    - TOML
    - CSV
    - JSON
    - PARQUET
    showField: true
    required: true
  - name: TransformLoggingNotExistConfigFile
    dataType: FILE
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: MergeType
    dataType: STRING
    repeated: false
    defaultValue: APPEND
    allowedValues:
    - APPEND
    - CONCATENATE
    showField: true
    required: true
  - name: TransformLoggingExistConfigFile
    dataType: FILE
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  tasks:
  - name: ExecuteHttpRequest
    alias: GetBucketList
    type: task
    appTags:
      appType:
      - httprequest
      environment:
      - logical
      execlevel:
      - app
    purpose: Get the list of buckets from the GCP Cloud Storage.
    description: Get the list of buckets from the GCP Cloud Storage.
  - name: ExtractDataUsingJQ
    alias: ExtractBuckets
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Extract the data alone from the listed buckets.
    description: Extract the data alone from the listed buckets.
  - name: CheckCondition
    alias: CheckLoggingExist
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Check if Logging column exists or not.
    description: Check if Logging column exists or not.
  - name: ConvertFileFormat
    alias: ConvertLoggingNotExistFile
    type: task
    appTags:
      appType:
      - nocredapp
      block:
      - block-4
      environment:
      - logical
      execlevel:
      - app
    purpose: Convert the Logging not exist file PARQUET file to JSON file.
    description: Convert the Logging not exist file PARQUET file to JSON file.
  - name: ConvertFileFormat
    alias: ConvertLoggingExistFile
    type: task
    appTags:
      appType:
      - nocredapp
      block:
      - block-4
      environment:
      - logical
      execlevel:
      - app
    purpose: Convert the Logging exist file PARQUET file to JSON file.
    description: Convert the Logging exist file PARQUET file to JSON file.
  - name: TransformData
    alias: TransformLoggingNotExistFile
    type: task
    appTags:
      appType:
      - nocredapp
      block:
      - block-5
      environment:
      - logical
      execlevel:
      - app
    purpose: Standardize the converted Logging not existing file.
    description: Standardize the converted Logging not existing file.
  - name: TransformData
    alias: TransformLoggingExistFile
    type: task
    appTags:
      appType:
      - nocredapp
      block:
      - block-5
      environment:
      - logical
      execlevel:
      - app
    purpose: Standardize the converted Logging existing file.
    description: Standardize the converted Logging not existing file.
  - name: MergeData
    alias: MergingTransformedLogging
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Merge Standardized Logging existing and not existing file.
    description: Merge Standardized Logging existing and not existing file.
  ioMap:
  - GetBucketList.Input.RequestConfigFile:=*.Input.BucketsRequestConfigFile
  - ExtractBuckets.Input.InputFile:=GetBucketList.Output.OutputFile
  - ExtractBuckets.Input.JQExpression:=*.Input.ExtractBucketsJQExpression
  - CheckLoggingExist.Input.InputFile:=ExtractBuckets.Output.OutputFile
  - CheckLoggingExist.Input.ConditionConfig:=*.Input.CheckIfLoggingExistConditionConfig
  - ConvertLoggingNotExistFile.Input.InputFile:=CheckLoggingExist.Output.UnmatchedConditionFile
  - ConvertLoggingNotExistFile.Input.OutputFileFormat:=*.Input.OutputFileFormat
  - ConvertLoggingExistFile.Input.InputFile:=CheckLoggingExist.Output.MatchedConditionFile
  - ConvertLoggingExistFile.Input.OutputFileFormat:=*.Input.OutputFileFormat
  - TransformLoggingNotExistFile.Input.InputFile1:=ConvertLoggingNotExistFile.Output.OutputFile
  - TransformLoggingNotExistFile.Input.TransformConfigFile:=*.Input.TransformLoggingNotExistConfigFile
  - TransformLoggingExistFile.Input.InputFile1:=ConvertLoggingExistFile.Output.OutputFile
  - TransformLoggingExistFile.Input.TransformConfigFile:=*.Input.TransformLoggingExistConfigFile
  - MergingTransformedLogging.Input.InputFile1:=TransformLoggingNotExistFile.Output.OutputFile
  - MergingTransformedLogging.Input.InputFile2:=TransformLoggingExistFile.Output.OutputFile
  - MergingTransformedLogging.Input.MergeType:=*.Input.MergeType
  - '*.Output.CompliancePCT_:=TransformLoggingExistFile.Output.CompliancePCT_'
  - '*.Output.ComplianceStatus_:=TransformLoggingExistFile.Output.ComplianceStatus_'
  - '*.Output.LogFile:=MergingTransformedLogging.Output.LogFile'
  - '*.Output.GCPCloudStorageLoggingStatusReport:=MergingTransformedLogging.Output.MergedData'

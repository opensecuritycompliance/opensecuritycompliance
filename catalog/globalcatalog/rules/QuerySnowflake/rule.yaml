apiVersion: v1alpha1
kind: rule
meta:
  name: QuerySnowflake
  purpose: Execute queries in Snowflake using API endpoints from the Python SDK.
  description: This rule allows executing SQL queries in Snowflake through API calls,
    leveraging the same endpoints used in the Snowflake Python SDK.
  labels:
    appType:
    - httprequest
    environment:
    - logical
    execlevel:
    - app
    framework:
    - snowflake
spec:
  inputs:
    ColumnSelectorExpression: .data.rowtype
    ExecuteSnowflakeQueryInputFile: <<MINIO_FILE_PATH>>
    ExecuteSnowflakeQueryRequestConfigFile: <<MINIO_FILE_PATH>>
    LogConfigFile: <<MINIO_FILE_PATH>>
    OutputFileFormat: JSON
    OutputFileName: ""
    ProceedIfLogExists: false
    RequiredFields:
    - statement
    RowDataExpression: .data.rowset
    SnowflakeCustomExceptionConfigFile: <<MINIO_FILE_PATH>>
    TransformConfigFile: <<MINIO_FILE_PATH>>
  inputsMeta__:
  - name: ExecuteSnowflakeQueryRequestConfigFile
    dataType: HTTP_CONFIG
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: ColumnSelectorExpression
    dataType: STRING
    repeated: false
    defaultValue: .data.rowtype
    allowedValues: []
    showField: true
    required: true
  - name: RowDataExpression
    dataType: STRING
    repeated: false
    defaultValue: .data.rowset
    allowedValues: []
    showField: true
    required: true
  - name: ExecuteSnowflakeQueryInputFile
    dataType: FILE
    repeated: false
    format: json
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: LogConfigFile
    dataType: FILE
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: ProceedIfLogExists
    dataType: BOOLEAN
    repeated: false
    defaultValue: false
    allowedValues: []
    showField: true
    required: true
  - name: OutputFileName
    dataType: STRING
    repeated: false
    defaultValue: ""
    allowedValues: []
    showField: true
    required: true
  - name: SnowflakeCustomExceptionConfigFile
    dataType: FILE
    repeated: false
    format: json
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: TransformConfigFile
    dataType: FILE
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: RequiredFields
    dataType: STRING
    repeated: true
    defaultValue:
    - statement
    allowedValues: []
    showField: true
    required: true
  - name: OutputFileFormat
    dataType: STRING
    repeated: false
    defaultValue: JSON
    allowedValues:
    - JSON
    - CSV
    - PARQUET
    - YAML
    - TOML
    - XLSX
    showField: true
    required: true
  tasks:
  - name: InputFieldValidation
    alias: Input Field Validation
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Validates the input file to ensure it contains the required fields and handles errors for missing fields.
    description: Validates records by ensuring all required fields are present, logging
      errors for missing fields.
  - name: ExecuteHttpRequestV2
    alias: Execute SQL Query In Snowflake
    type: task
    appTags:
      appType:
      - httprequest
      environment:
      - logical
      execlevel:
      - app
      framework:
      - snowflake
    purpose: To execute SQL query in Snowflake
    description: Automate API requests by processing inputs and outputting responses
      in a structured JSON format.
  - name: ConditionalLogGenerator
    alias: Generate Conditional Logs
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Generates log data based on conditions.
    description: Generates log data based on conditions.
  - name: ConvertTableDataToKeyedRecords
    alias: Format SQL Query Response
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: To format query response to json
    description: To format query response to json
  - name: TransformDataV2
    alias: Transform the evidence
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Add columns - 'STATUS','REASON' in evidence.
    description: TransformData allows you to perform a variety of column transformations on your InputFile1.
  - name: CustomExceptionHandler
    alias: t6
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Handling exceptions and converting them into user-friendly error messages.
    description: Handles specific exceptions and map generic error messages to user-friendly,
      task-specific messages. It ensures that errors encountered during task execution
      are appropriately managed and presented in a more understandable format.
  - name: ConvertFileFormatV2
    alias: Convert Parquet to Json
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Purpose of the task
    description: 'Convert files between the supported formats: JSON, CSV, PARQUET,
      YAML, TOML, and XLSX.'
  ioMap:
  - Input Field Validation.Input.InputFile:=*.Input.ExecuteSnowflakeQueryInputFile
  - Input Field Validation.Input.RequiredFields:=*.Input.RequiredFields
  - Execute SQL Query In Snowflake.Input.RequestConfigFile:=*.Input.ExecuteSnowflakeQueryRequestConfigFile
  - Execute SQL Query In Snowflake.Input.InputFile:=Input Field Validation.Output.ValidDataFile
  - Execute SQL Query In Snowflake.Input.LogFile:=Input Field Validation.Output.LogFile
  - Generate Conditional Logs.Input.InputFile:=Execute SQL Query In Snowflake.Output.OutputFile
  - Generate Conditional Logs.Input.LogFile:=Execute SQL Query In Snowflake.Output.LogFile
  - Generate Conditional Logs.Input.LogConfigFile:=*.Input.LogConfigFile
  - Generate Conditional Logs.Input.ProceedIfLogExists:=*.Input.ProceedIfLogExists
  - Format SQL Query Response.Input.InputFile:=Generate Conditional Logs.Output.OutputFile
  - Format SQL Query Response.Input.LogFile:=Generate Conditional Logs.Output.LogFile
  - Format SQL Query Response.Input.OutputFileName:=*.Input.OutputFileName
  - Format SQL Query Response.Input.ColumnSelectorExpression:=*.Input.ColumnSelectorExpression
  - Format SQL Query Response.Input.RowDataExpression:=*.Input.RowDataExpression
  - Transform the evidence.Input.InputFile1:=Format SQL Query Response.Output.OutputFile
  - Transform the evidence.Input.TransformConfigFile:=*.Input.TransformConfigFile
  - Transform the evidence.Input.LogFile:=Format SQL Query Response.Output.LogFile
  - t6.Input.InputFile1:=Transform the evidence.Output.OutputFile
  - t6.Input.LogFile:=Transform the evidence.Output.LogFile
  - t6.Input.CustomExceptionConfigFile:=*.Input.SnowflakeCustomExceptionConfigFile
  - Convert Parquet to Json.Input.InputFile:=Transform the evidence.Output.OutputFile
  - Convert Parquet to Json.Input.OutputFileFormat:=*.Input.OutputFileFormat
  - Convert Parquet to Json.Input.LogConfigFile:=Transform the evidence.Output.LogFile
  - '*.Output.CompliancePCT_:=Convert Parquet to Json.Output.CompliancePCT_'
  - '*.Output.ComplianceStatus_:=Convert Parquet to Json.Output.ComplianceStatus_'
  - '*.Output.LogFile:=t6.Output.LogFile'
  - '*.Output.SnowflakeQueryResponse:=Convert Parquet to Json.Output.OutputFile'

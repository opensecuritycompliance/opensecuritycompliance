apiVersion: v1alpha1
kind: rule
meta:
  name: GCPCloudStorageEncryptionEnabled
  purpose: Ensures Cloud Storage buckets use encryption, requiring CMEK for compliance
    to enhance security, data protection, and access control.
  description: Ensures Cloud Storage buckets use encryption, requiring CMEK for compliance
    to enhance security, data protection, and access control.
  labels:
    appType:
    - httprequest
    environment:
    - logical
    execlevel:
    - app
spec:
  inputs:
    BucketsRequestConfigFile: <<MINIO_FILE_PATH>>                    # Request config file to get the buckets list from GCP Cloud Storage
    CheckIfEncryptionExistsConditionConfig: <<MINIO_FILE_PATH>>      # Condition config file to check if Encryption exists or not
    ExtractBucketsJQExpression: .[].items[]                  
    OutputFileFormat: JSON                                            
    TransformEncryptionConfigFile: <<MINIO_FILE_PATH>>               # Transform config file to standardize the report
  inputsMeta__:
  - name: BucketsRequestConfigFile
    dataType: HTTP_CONFIG
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: ExtractBucketsJQExpression
    dataType: STRING
    repeated: false
    defaultValue: .[].items[]
    allowedValues: []
    showField: true
    required: true
  - name: CheckIfEncryptionExistsConditionConfig
    dataType: FILE
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  - name: OutputFileFormat
    dataType: STRING
    repeated: false
    defaultValue: JSON
    allowedValues:
    - YAML
    - TOML
    - CSV
    - JSON
    - PARQUET
    showField: true
    required: true
  - name: TransformEncryptionConfigFile
    dataType: FILE
    repeated: false
    format: toml
    defaultValue: <<MINIO_FILE_PATH>>
    allowedValues: []
    showField: true
    required: true
  tasks:
  - name: ExecuteHttpRequest
    alias: GetBucketsList
    type: task
    appTags:
      appType:
      - httprequest
      environment:
      - logical
      execlevel:
      - app
    purpose: Get the list of buckets from the GCP Cloud Storage.
    description: Get the list of buckets from the GCP Cloud Storage.
  - name: ExtractDataUsingJQ
    alias: ExtractBuckets
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Extract the data alone from the listed buckets.
    description: Extract the data alone from the listed buckets.
  - name: CheckCondition
    alias: CheckIfEncryptionExists
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Check if the Encryption column exists in the bucket.
    description: Check if the Encryption column exists in the bucket.
  - name: ConvertFileFormat
    alias: ConvertEncryptionNotExists
    type: task
    appTags:
      appType:
      - nocredapp
      block:
      - block-4
      environment:
      - logical
      execlevel:
      - app
    purpose: Convert Encryption Not Existing PARQUET file to JSON file.
    description: Convert Encryption Not Existing PARQUET file to JSON file.
  - name: ConvertFileFormat
    alias: ConvertEncryptionExists
    type: task
    appTags:
      appType:
      - nocredapp
      block:
      - block-4
      environment:
      - logical
      execlevel:
      - app
    purpose: Convert Encryption Existing PARQUET file to JSON file.
    description: Convert Encryption Existing PARQUET file to JSON file.
  - name: MergeData
    alias: MergeEncryptionFiles
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Merging Both the Existing and Not Existing Converted files.
    description: Merging Both the Existing and Not Existing Converted files.
  - name: TransformData
    alias: TransformEncryptionFile
    type: task
    appTags:
      appType:
      - nocredapp
      environment:
      - logical
      execlevel:
      - app
    purpose: Standardize the Encryption report.
    description: Standardize the Encryption report.
  ioMap:
  - GetBucketsList.Input.RequestConfigFile:=*.Input.BucketsRequestConfigFile
  - ExtractBuckets.Input.InputFile:=GetBucketsList.Output.OutputFile
  - ExtractBuckets.Input.JQExpression:=*.Input.ExtractBucketsJQExpression
  - CheckIfEncryptionExists.Input.InputFile:=ExtractBuckets.Output.OutputFile
  - CheckIfEncryptionExists.Input.ConditionConfig:=*.Input.CheckIfEncryptionExistsConditionConfig
  - ConvertEncryptionNotExists.Input.InputFile:=CheckIfEncryptionExists.Output.UnmatchedConditionFile
  - ConvertEncryptionNotExists.Input.OutputFileFormat:=*.Input.OutputFileFormat
  - ConvertEncryptionExists.Input.InputFile:=CheckIfEncryptionExists.Output.MatchedConditionFile
  - ConvertEncryptionExists.Input.OutputFileFormat:=*.Input.OutputFileFormat
  - MergeEncryptionFiles.Input.InputFile1:=ConvertEncryptionNotExists.Output.OutputFile
  - MergeEncryptionFiles.Input.InputFile2:=ConvertEncryptionExists.Output.OutputFile
  - TransformEncryptionFile.Input.InputFile1:=MergeEncryptionFiles.Output.MergedData
  - TransformEncryptionFile.Input.TransformConfigFile:=*.Input.TransformEncryptionConfigFile
  - '*.Output.CompliancePCT_:=TransformEncryptionFile.Output.CompliancePCT_'
  - '*.Output.ComplianceStatus_:=TransformEncryptionFile.Output.ComplianceStatus_'
  - '*.Output.LogFile:=TransformEncryptionFile.Output.LogFile'
  - '*.Output.GCPCloudStorageEncryptionStatusReport:=TransformEncryptionFile.Output.OutputFile'
